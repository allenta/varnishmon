// Debug metrics are explicitly tagged as such. Otherwise, they are assumed to
// be regular metrics. The following is strongly opinionated but mostly based on
// *.vsc files in https://github.com/varnishcache/varnish-cache/tree/master/lib/libvcc/.
// None of this would be necessary if the 'varnishstat -j' output provided the level
// (info / debug / diag) for each metric, which should be trivial because the
// information is available, but it doesn't.
export const DEBUG_METRICS = [
  /^MGT[.](?!(?:uptime)$)/,
  new RegExp('MAIN[.](?!(?:' + [
    'backend_busy',
    'backend_conn',
    'backend_fail',
    'backend_recycle',
    'backend_req',
    'backend_retry',
    'backend_reuse',
    'backend_unhealthy',
    'backend_wait_fail',
    'backend_wait',
    'bans_lurker_obj_killed_cutoff',
    'bans_lurker_obj_killed',
    'bans_obj_killed',
    'bans',
    'bgfetch_no_thread',
    'busy_killed',
    'busy_sleep',
    'busy_wakeup',
    'c_ykey_purges',
    'cache_hit_grace',
    'cache_hit',
    'cache_hitmiss',
    'cache_hitpass',
    'cache_miss',
    'client_req_400',
    'client_req_417',
    'client_req',
    'client_resp_500',
    'esi_errors',
    'esi_maxdepth',
    'esi_req',
    'esi_warnings',
    'fetch_1xx',
    'fetch_204',
    'fetch_304',
    'fetch_bad',
    'fetch_chunked',
    'fetch_eof',
    'fetch_failed',
    'fetch_fast304',
    'fetch_head',
    'fetch_length',
    'fetch_none',
    'fetch_stale_deliver',
    'fetch_stale_rearm',
    'g_mem_file',
    'g_mem_private',
    'g_mem_rss',
    'g_mem_swap',
    'goto_dns_cache_hits',
    'goto_dns_lookup_fails',
    'goto_dns_lookups',
    'losthdr',
    'n_backend',
    'n_expired',
    'n_gunzip',
    'n_gzip',
    'n_lru_limited',
    'n_lru_moved',
    'n_lru_nuked',
    'n_obj_purged',
    'n_object_hitmiss',
    'n_object_hitpass',
    'n_object',
    'n_objectcore',
    'n_objecthead',
    'n_purges',
    'n_test_gunzip',
    'n_vcl',
    'req_dropped',
    'req_reset',
    's_fetch',
    's_pass',
    's_pipe_hdrbytes',
    's_pipe_in',
    's_pipe_out',
    's_pipe',
    's_req_bodybytes',
    's_req_hdrbytes',
    's_resp_bodybytes',
    's_resp_hdrbytes',
    's_sess',
    's_synth',
    'sc_bankrupt',
    'sc_rapid_reset',
    'sc_sock_closed',
    'sc_vcl_failure',
    'sess_closed_err',
    'sess_closed',
    'sess_conn',
    'sess_drop',
    'sess_dropped',
    'sess_fail_ebadf',
    'sess_fail_econnaborted',
    'sess_fail_eintr',
    'sess_fail_emfile',
    'sess_fail_enomem',
    'sess_fail_other',
    'sess_fail',
    'sess_herd',
    'sess_queued',
    'sess_readahead',
    'shm_cont',
    'shm_cycles',
    'shm_flushes',
    'shm_records',
    'thread_queue_len',
    'threads_created',
    'threads_destroyed',
    'threads_failed',
    'threads_limited',
    'threads',
    'uptime',
    'vcl_fail',
    'vmods',
    'ws_backend_overflow',
    'ws_client_overflow',
    'ws_session_overflow',
    'ws_thread_overflow',
  ].join('|') + ')$)'),
  new RegExp('MSE[.](?!.*[.](?:' + [
    'c_fail',
    'c_memcache_hit',
    'c_memcache_miss',
    'c_ykey_purged',
    'g_bytes',
    'g_space',
    'g_sparenode',
    'g_ykey_keys',
    'n_lru_moved',
    'n_lru_nuked',
    'n_vary',
  ].join('|') + ')$)'),
  new RegExp('MSE_BOOK[.](?!.*[.](?:' + [
    'c_insert_timeout',
    'c_waterlevel_purge',
    'c_waterlevel_queue',
    'c_waterlevel_runs',
    'g_banlist_bytes',
    'g_banlist_space',
    'g_bytes',
    'g_space',
    'n_vary',
  ].join('|') + ')$)'),
  new RegExp('MSE_STORE[.](?!.*[.](?:' + [
    'c_aio_finished_bytes_read',
    'c_aio_finished_bytes_write',
    'c_aio_finished_read',
    'c_aio_finished_write',
    'c_waterlevel_purge',
    'c_waterlevel_queue',
    'g_alloc_bytes',
    'g_free_bytes',
    'g_objects',
    'g_ykey_keys',
  ].join('|') + ')$)'),
  new RegExp('MSE4[.](?!(?:' + [
    'g_varyspec',
    'g_ykey_keys',
    'c_ykey_purged',
  ].join('|') + ')$)'),
  new RegExp('MSE4_MEM[.](?!(?:' + [
    'c_allocation',
    'c_allocation_buffer',
    'c_allocation_ephemeral',
    'c_allocation_failure',
    'c_allocation_pass',
    'c_allocation_persisted',
    'c_allocation_reqbody',
    'c_allocation_synthetic',
    'c_eviction',
    'c_eviction_failure',
    'c_eviction_reorder',
    'c_free',
    'c_free_buffer',
    'c_free_ephemeral',
    'c_free_pass',
    'c_free_persisted',
    'c_free_reqbody',
    'c_free_synthetic',
    'c_memcache_hit',
    'c_memcache_miss',
    'g_allocations',
    'g_bytes',
    'g_bytes_buffer',
    'g_bytes_ephemeral',
    'g_bytes_pass',
    'g_bytes_persisted',
    'g_bytes_reqbody',
    'g_bytes_synthetic',
    'g_objects',
    'g_objects_ephemeral',
    'g_objects_pass',
    'g_objects_persisted',
    'g_objects_reqbody',
    'g_objects_synthetic',
    'g_space',
  ].join('|') + ')$)'),
  new RegExp('MSE4_BOOK[.](?!.*[.](?:' + [
    'c_freeslot_queued',
    'c_submitslot_queued',
    'c_ykey_purged',
    'g_freeslot_queue',
    'g_objects',
    'g_slots_unused',
    'g_slots_used',
    'g_submitslot_queue',
    'g_unreachable_objects',
    'g_varyspec',
    'g_ykey_keys',
    'online',
  ].join('|') + ')$)'),
  new RegExp('MSE4_STORE[.](?!.*[.](?:' + [
    'online',
    'g_bytes_used',
    'g_bytes_unused',
    'g_objects',
    'g_allocation_queue',
    'c_allocation_queued',
    'g_io_queued',
    'g_io_queued_read',
    'g_io_queued_write',
    'c_io_finished_read',
    'c_io_finished_write',
    'c_io_finished_bytes_read',
    'c_io_finished_bytes_write',
    'g_io_blocked_read',
    'g_io_blocked_write',
    'c_io_limited',
  ].join('|') + ')$)'),
  new RegExp('MSE4_BANJRN[.](?!.*[.](?:' + [
    'g_ban_bytes',
    'g_bans',
    'g_bytes',
    'g_overflow_ban_bytes',
    'g_overflow_bans',
    'g_space',
  ].join('|') + ')$)'),
  new RegExp('MSE4_CAT[.](?!.*[.](?:' + [
    'c_allocation',
    'c_allocation_ephemeral',
    'c_allocation_pass',
    'c_allocation_persisted',
    'c_eviction',
    'c_eviction_failure',
    'c_eviction_reorder',
    'c_free',
    'c_free_ephemeral',
    'c_free_pass',
    'c_free_persisted',
    'c_memcache_hit',
    'c_memcache_miss',
    'g_allocations',
    'g_bytes',
    'g_bytes_ephemeral',
    'g_bytes_pass',
    'g_bytes_persisted',
    'g_objects',
    'g_objects_ephemeral',
    'g_objects_pass',
    'g_objects_persisted',
  ].join('|') + ')$)'),
  new RegExp('SMA[.](?!.*[.](?:' + [
    'c_bytes',
    'c_fail',
    'c_freed',
    'c_req',
    'g_alloc',
    'g_bytes',
    'g_space',
  ].join('|') + ')$)'),
  new RegExp('SMF[.](?!.*[.](?:' + [
    'c_bytes',
    'c_fail',
    'c_freed',
    'c_req',
    'g_alloc',
    'g_bytes',
    'g_smf_frag',
    'g_smf_large',
    'g_smf',
    'g_space',
  ].join('|') + ')$)'),
  new RegExp('SMU[.](?!.*[.](?:' + [
    'c_bytes',
    'c_fail',
    'c_freed',
    'c_req',
    'g_alloc',
    'g_bytes',
    'g_space',
  ].join('|') + ')$)'),
  /^BROTLI[.]/,
  /^SLICER[.]/,
  new RegExp('VMOD_HTTP[.](?!(?:' + [
    'handle_abandon',
    'handle_completed',
    'handle_internal_error',
    'handle_limited',
    'handle_requests',
  ].join('|') + ')$)'),
  new RegExp('KVSTORE[.](?!.*[.](?:' + [
    // TBD.
  ].join('|') + ')$)'),
  new RegExp('ACCG[.](?!.*[.](?:' + [
    'backend_200_count',
    'backend_2xx_count',
    'backend_304_count',
    'backend_3xx_count',
    'backend_404_count',
    'backend_4xx_count',
    'backend_503_count',
    'backend_5xx_count',
    'backend_req_bodybytes',
    'backend_req_count',
    'backend_req_hdrbytes',
    'backend_resp_bodybytes',
    'backend_resp_hdrbytes',
    'client_200_count',
    'client_2xx_count',
    'client_304_count',
    'client_3xx_count',
    'client_404_count',
    'client_4xx_count',
    'client_503_count',
    'client_5xx_count',
    'client_grace_hit_count',
    'client_hit_count',
    'client_hit_req_bodybytes',
    'client_hit_req_hdrbytes',
    'client_hit_resp_bodybytes',
    'client_hit_resp_hdrbytes',
    'client_miss_count',
    'client_miss_req_bodybytes',
    'client_miss_req_hdrbytes',
    'client_miss_resp_bodybytes',
    'client_miss_resp_hdrbytes',
    'client_pass_count',
    'client_pass_req_bodybytes',
    'client_pass_req_hdrbytes',
    'client_pass_resp_bodybytes',
    'client_pass_resp_hdrbytes',
    'client_pipe_count',
    'client_pipe_req_bodybytes',
    'client_pipe_req_hdrbytes',
    'client_pipe_resp_bodybytes',
    'client_pipe_resp_hdrbytes',
    'client_req_bodybytes',
    'client_req_count',
    'client_req_hdrbytes',
    'client_resp_bodybytes',
    'client_resp_hdrbytes',
    'client_synth_count',
    'client_synth_req_bodybytes',
    'client_synth_req_hdrbytes',
    'client_synth_resp_bodybytes',
    'client_synth_resp_hdrbytes',
  ].join('|') + ')$)'),
  new RegExp('ACCG_DIAG[.](?!.*[.](?:' + [
    'bereq_dropped',
    'create_namespace_failure',
    'key_without_namespace',
    'namespace_already_set',
    'namespace_undefined',
    'out_of_key_slots',
    'req_dropped',
    'set_key_failure',
  ].join('|') + ')$)'),
  new RegExp('VBE[.](?!.*[.](?:' + [
    'bereq_bodybytes',
    'bereq_hdrbytes',
    'beresp_bodybytes',
    'beresp_hdrbytes',
    'busy',
    'conn',
    'fail',
    'happy',
    'is_healthy',
    'pipe_hdrbytes',
    'pipe_in',
    'pipe_out',
    'req',
    'unhealthy',
  ].join('|') + ')$)'),
  /^WAITER[.]/,
  /^MEMPOOL[.]/,
  /^LCK[.]/,
];

// Clustering of metrics is based on the longest prefix just before the last
// dot, unless explicitly overridden here using a regex + a capture group.
export const ADHOC_CLUSTERING_PREFIXES = [
  /^(MAIN[.]backend)/,
  /^(MAIN[.]bans)_?/,
  /^(MAIN[.]cache)/,
  /^(MAIN[.]client)/,
  /^(MAIN[.]esi_)/,
  /^(MAIN[.]fetch)/,
  /^(MAIN[.]g_mem)/,
  /^(MAIN[.]s_)/,
  /^(MAIN[.]sc_)/,
  /^(MAIN[.]sess_)/,
  /^(MAIN[.]shm_)/,
  /^(MAIN[.]thread)s?_?/,
  /^(MAIN[.]vgs_)/,
  /^(MAIN[.]ws_)/,
  /^(WAITER[.])/,
  /^(MEMPOOL[.])/,
  /^(LCK[.])/,
];

// Clusters are sorted by name, unless explicitly overridden here using a regex.
export const ORDER_OF_CLUSTERS = [
  /^MGT[.]/,
  /^MAIN[.][*]$/,
  /^MAIN[.]/,
  /^MSE[.]/,
  /^MSE_/,
  /^MSE4[.]/,
  /^MSE4_/,
  /^SMA[.]/,
  /^SMF[.]/,
  /^SMU[.]/,
  /^BROTLI[.]/,
  /^SLICER[.]/,
  /^VMOD_/,
  /^KVSTORE[.]/,
  /^ACCG[.]/,
  /^ACCG_DIAG[.]/,
  /^VBE[.]/,
  /^WAITER[.]/,
  /^MEMPOOL[.]/,
  /^LCK[.]/,
];
